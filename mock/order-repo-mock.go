// Code generated by MockGen. DO NOT EDIT.
// Source: intrface/order-repo.go

// Package mock_intrface is a generated GoMock package.
package mock_intrface

import (
	intrface "order-and-pay/intrface"
	model "order-and-pay/model"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepo is a mock of OrderRepo interface.
type MockOrderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepoMockRecorder
}

// MockOrderRepoMockRecorder is the mock recorder for MockOrderRepo.
type MockOrderRepoMockRecorder struct {
	mock *MockOrderRepo
}

// NewMockOrderRepo creates a new mock instance.
func NewMockOrderRepo(ctrl *gomock.Controller) *MockOrderRepo {
	mock := &MockOrderRepo{ctrl: ctrl}
	mock.recorder = &MockOrderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepo) EXPECT() *MockOrderRepoMockRecorder {
	return m.recorder
}

// AddPayment mocks base method.
func (m *MockOrderRepo) AddPayment(p *model.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPayment", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPayment indicates an expected call of AddPayment.
func (mr *MockOrderRepoMockRecorder) AddPayment(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPayment", reflect.TypeOf((*MockOrderRepo)(nil).AddPayment), p)
}

// AddProduct mocks base method.
func (m *MockOrderRepo) AddProduct(arg0 intrface.Itx, arg1 *model.ProductInOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockOrderRepoMockRecorder) AddProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockOrderRepo)(nil).AddProduct), arg0, arg1)
}

// Create mocks base method.
func (m *MockOrderRepo) Create() (string, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockOrderRepoMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderRepo)(nil).Create))
}

// DeleteProduct mocks base method.
func (m *MockOrderRepo) DeleteProduct(p *model.ProductInOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockOrderRepoMockRecorder) DeleteProduct(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockOrderRepo)(nil).DeleteProduct), p)
}

// GetAll mocks base method.
func (m *MockOrderRepo) GetAll(from, to time.Time) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", from, to)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockOrderRepoMockRecorder) GetAll(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockOrderRepo)(nil).GetAll), from, to)
}

// GetById mocks base method.
func (m *MockOrderRepo) GetById(orderId string) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", orderId)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockOrderRepoMockRecorder) GetById(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockOrderRepo)(nil).GetById), orderId)
}

// GetDb mocks base method.
func (m *MockOrderRepo) GetDb() intrface.Idb {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDb")
	ret0, _ := ret[0].(intrface.Idb)
	return ret0
}

// GetDb indicates an expected call of GetDb.
func (mr *MockOrderRepoMockRecorder) GetDb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDb", reflect.TypeOf((*MockOrderRepo)(nil).GetDb))
}

// GetOrderStatus mocks base method.
func (m *MockOrderRepo) GetOrderStatus(tx intrface.Itx, orderId string) (uint8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderStatus", tx, orderId)
	ret0, _ := ret[0].(uint8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderStatus indicates an expected call of GetOrderStatus.
func (mr *MockOrderRepoMockRecorder) GetOrderStatus(tx, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderStatus", reflect.TypeOf((*MockOrderRepo)(nil).GetOrderStatus), tx, orderId)
}

// GetPaymentsByOrderId mocks base method.
func (m *MockOrderRepo) GetPaymentsByOrderId(tx intrface.Itx, orderId string) ([]model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsByOrderId", tx, orderId)
	ret0, _ := ret[0].([]model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsByOrderId indicates an expected call of GetPaymentsByOrderId.
func (mr *MockOrderRepoMockRecorder) GetPaymentsByOrderId(tx, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsByOrderId", reflect.TypeOf((*MockOrderRepo)(nil).GetPaymentsByOrderId), tx, orderId)
}

// GetPaymentsSumByOrderId mocks base method.
func (m *MockOrderRepo) GetPaymentsSumByOrderId(tx intrface.Itx, orderId string) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsSumByOrderId", tx, orderId)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsSumByOrderId indicates an expected call of GetPaymentsSumByOrderId.
func (mr *MockOrderRepoMockRecorder) GetPaymentsSumByOrderId(tx, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsSumByOrderId", reflect.TypeOf((*MockOrderRepo)(nil).GetPaymentsSumByOrderId), tx, orderId)
}

// GetProductId mocks base method.
func (m *MockOrderRepo) GetProductId(tx intrface.Itx, p *model.ProductInOrder) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductId", tx, p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductId indicates an expected call of GetProductId.
func (mr *MockOrderRepoMockRecorder) GetProductId(tx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductId", reflect.TypeOf((*MockOrderRepo)(nil).GetProductId), tx, p)
}

// GetProductsByOrderId mocks base method.
func (m *MockOrderRepo) GetProductsByOrderId(tx intrface.Itx, orderId string) ([]model.ProductInOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByOrderId", tx, orderId)
	ret0, _ := ret[0].([]model.ProductInOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByOrderId indicates an expected call of GetProductsByOrderId.
func (mr *MockOrderRepoMockRecorder) GetProductsByOrderId(tx, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByOrderId", reflect.TypeOf((*MockOrderRepo)(nil).GetProductsByOrderId), tx, orderId)
}

// GetProductsPriceSumByOrderId mocks base method.
func (m *MockOrderRepo) GetProductsPriceSumByOrderId(tx intrface.Itx, orderId string) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsPriceSumByOrderId", tx, orderId)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsPriceSumByOrderId indicates an expected call of GetProductsPriceSumByOrderId.
func (mr *MockOrderRepoMockRecorder) GetProductsPriceSumByOrderId(tx, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsPriceSumByOrderId", reflect.TypeOf((*MockOrderRepo)(nil).GetProductsPriceSumByOrderId), tx, orderId)
}

// UpdateOrderStatusToComplete mocks base method.
func (m *MockOrderRepo) UpdateOrderStatusToComplete(tx intrface.Itx, orderId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatusToComplete", tx, orderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatusToComplete indicates an expected call of UpdateOrderStatusToComplete.
func (mr *MockOrderRepoMockRecorder) UpdateOrderStatusToComplete(tx, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatusToComplete", reflect.TypeOf((*MockOrderRepo)(nil).UpdateOrderStatusToComplete), tx, orderId)
}

// UpdateProductNumById mocks base method.
func (m *MockOrderRepo) UpdateProductNumById(tx intrface.Itx, num, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductNumById", tx, num, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductNumById indicates an expected call of UpdateProductNumById.
func (mr *MockOrderRepoMockRecorder) UpdateProductNumById(tx, num, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductNumById", reflect.TypeOf((*MockOrderRepo)(nil).UpdateProductNumById), tx, num, id)
}
